<?php

namespace KDSM\ContentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * QueueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QueueRepository extends EntityRepository
{

    public function getCurrentQueue($currentUserId)
    {
        $query = $this->createQueryBuilder('tb');
        $query->select()
            ->where('tb.status = ?1')
            ->orWhere('tb.status = ?2')
            ->orWhere('tb.status = ?3')
            ->orderBy('tb.reservationDateTime', 'DESC');
        $query->setParameters(array(1 => 'active', 2 => 'in_queue', 3 => 'creatingGame'));
        $result = $query->getQuery()->getResult();
        $queryResponse = null;
        foreach ($result as $key => $queue) {
            $queryResponse[$key]['id'] = $queue->getId();
            $queryResponse[$key]['date'] = $queue->getReservationDateTime();
            $queryResponse[$key]['status'] = $queue->getStatus();
            $queryResponse[$key]['queueRights'] = 'restricted';
            foreach ($queue->getUsersQueues() as $userKey => $userQueue) {
                $queryResponse[$key]['users'][$userKey]['userId'] = $userQueue->getUser()->getId();
                $queryResponse[$key]['users'][$userKey]['userName'] = $userQueue->getUser()->getUserName();
                $queryResponse[$key]['users'][$userKey]['userPicturePath'] = $userQueue->getUser()->getUserName();
                $queryResponse[$key]['users'][$userKey]['userStatus'] = $userQueue->getUserStatusInQueue();
                if ($userQueue->getUser()->getId() == $currentUserId) {
                    $queryResponse[$key]['queueRights'] = 'queueMember';
                    if ($queryResponse[$key]['users'][$userKey]['userStatus'] == 'queueOwner') {
                        $queryResponse[$key]['queueRights'] = 'queueOwner';
                    }
                }
            }
        }
        return $queryResponse;
    }

    public function persistObject($newQueue)
    {
        $this->getEntityManager()->persist($newQueue);
        $this->getEntityManager()->flush();
        $this->getEntityManager()->clear();
    }
}
