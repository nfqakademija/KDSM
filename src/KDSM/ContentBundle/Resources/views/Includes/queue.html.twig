{% block queue %}
    {% block javascripts %}
    <script type="text/javascript">
        $(document).ready(function() {
            QueueList();
            //setInterval(QueueList, 8000);

            function emptyControl() {
                //add already selected users to queue control in editing
                $('.queue-control').find("ul.log-list").empty();
                $('.queue-control').find("button#save-queue-element").removeClass("hidden");
            }
            //function updateing queue list
            function QueueList() {
                $.ajax({
                    type: "post",
                    url: "{{ path('kdsm_queue', {'method':'list', 'queueId':null}) }}",
                    success: function (response_json) {
                        console.log(response_json);
                        //remove all queue elements of container
                        $(".queue-container .dinamically-added").remove();

                        //show all queue elements from received json
                        for(var i = 0; i < response_json.length; i++) {
                            var queueElement = $(".queue-game.default-queue-element").clone().removeClass("hidden").removeClass("default-queue-element").addClass("dinamically-added");

                            //set queue id
                            queueElement.attr("id", response_json[i].id);

                            //if status is creating, add class to change element design
                            if(response_json[i].status == 'active') {
                                queueElement.remove();
                            }

                            //if status is creating, add class to change element design
                            if(response_json[i].status == 'creatingGame') {
                                queueElement.addClass("creatingGame");
                            }

                            //if I am invited to the game, add class to change element design
                            if(response_json[i].queueRights == 'queueMember') {
                                queueElement.addClass("gameMember");
                            }

                            //if not queue element owner, remove control possibility
                            if (response_json[i].queueRights != "queueOwner") {
                                queueElement.find("div.queue-element-info").remove();
                            }


                            //get queue element users
                            for(var x = 0; x < response_json[i].users.length; x++) {
                                //if user is defined add user name to queue element
                                if (response_json[i].users[x] != undefined) {
                                    queueElement.find(".row.player-" + x + " .player-name").text(response_json[i].users[x].userName);
                                }

                                //if user is pending, add spinner instead of photo
                                if (response_json[i].users[x].userStatus == "invitePending") {
                                    queueElement.find(".row.player-" + x + " .player-photo").attr("src", "{{ asset('bundles/kdsmcontent/images/invite.png') }}");
                                }

                                //else if defined user photo and it's status not decline invitation, show it
                                else if (response_json[i].users[x].userPicturePath != undefined) {
                                    queueElement.find(".row.player-" + x + " .player-photo").attr("src", "{{ asset('bundles/kdsmcontent/images/user-photo.png') }}");
                                }

                                if(response_json[i].users[x].userStatus == "inviteDeclined") {
                                    queueElement.find(".row.player-" + x + " .player-name").empty();
                                    queueElement.find(".row.player-" + x + " .player-photo").attr("src", "{{ asset('bundles/kdsmcontent/images/add-user.png') }}");
                                }

                                //if logged user is in the queue element and he is in pending status
                                // add him response possibility
                                if(response_json[i].users[x].userId == response_json[i].loggedUserId && response_json[i].users[x].userStatus == "invitePending") {
                                    queueElement.find(".row.player-" + x + " .player-photo").replaceWith("<div class='col-sm-10 user-response'></div>");
                                    queueElement.find(".row.player-" + x + " .player-name").remove();
                                    queueElement.find("div.user-response").append("<div class='row'></div>");
                                    queueElement.find("div.user-response").prepend("<label>Å½aisi?</label>")
                                    queueElement.find("div.user-response").children(".row")
                                            .append("<div class='col-sm-6 accept-invitation'><i class='fa fa-thumbs-up'></i></div>")
                                            .append("<div class='col-sm-6 decline-invitation'><i class='fa fa-thumbs-down'></i></div>");
                                }
                            }

                            $(".default-queue-element").after(queueElement);
                        }
                    }
                });
            }

            //function to read JSON from url
            function readJSON(file) {
                var request = new XMLHttpRequest();
                request.open('GET', file, false);
                request.send(null);
                if (request.status == 200)
                    return request.responseText;
            }

            //queue control function
            function QueueControl(method, param, usersArray) {
                var queueControlSource = $('.queue-control').clone();
                var availableTags = JSON.parse(readJSON("{{ path('kdsm_queue', {'method':'lfg', 'queueId':null}) }}"));
                var selectedUsersIds = (usersArray != null) ? usersArray : [];

                $("#search-users").autocomplete({
                    source: availableTags,
                    create: function( event, ui ) {
                        $(this).autocomplete("widget")
                                .appendTo("#results")
                                .css("position", "static");
                    },
                    open: function() {
                        $(this).autocomplete("widget")
                                .appendTo("#results")
                                .css("position", "static");
                    },
                    select: function(event, ui) {
                        //when user is selected
                        if(selectedUsersIds.length < 3) {
                            //get selected user id and push it to selected users array
                            var selectedUserId = ui.item.id;
                            selectedUsersIds.push(selectedUserId);

                            //get selected user html and add it to selected container
                            var selectedUserRowHTML = $(".found-users").find("li#user-"+selectedUserId).clone();
                            selectedUserRowHTML.removeClass("ui-state-focus");
                            $("li#user-"+selectedUserId).hide();
                            $("#log").children("ul.log-list").prepend(selectedUserRowHTML);
                        }

                        //if at least one user is selected, add button to save the queue
                        if(selectedUsersIds.length == 1) {
                            $("button#save-queue-element").removeClass("hidden");
                        }
                    }
                })
                        .autocomplete( "instance" )._renderItem = function( ul, item ) {
                    //check if user wasn't already selected and don't show him if he was
                    var alreadySelected = false;
                    for (var i = 0; i < selectedUsersIds.length; i++) {
                        if(selectedUsersIds[i] == item.id) {
                            alreadySelected = true;
                        }
                    }
                    if(alreadySelected == false) {
                        return $("<li id='user-" + item.id + "'>")
                                .append(item.value)
                                .appendTo(ul);
                    }
                };

                //when needs to diselect user
                $("#log").on("click", "li", function() {
                    var removedRowId = $(this).attr("id");
                    var removedRowUserId = parseInt(removedRowId.split("-")[1]);
                    var indexOfIdInArray = selectedUsersIds.indexOf(removedRowUserId);
                    selectedUsersIds.splice(indexOfIdInArray, 1);
                    $(this).remove();
                    //get back user to list
                    $(".sidebar").find("li#"+removedRowId).show();

                    if(selectedUsersIds.length < 1) {
                        $("button#save-queue-element").addClass("hidden");
                    }
                });

                $("button#save-queue-element").click(function() {
                    var path = "{{ path('kdsm_queue', {'method':'HereMethodName', 'queueId':'HereQueueId'}) }}";
                    path = path.replace("HereMethodName", method);
                    path = path.replace("HereQueueId", param);
                    $.ajax({
                        type: "post",
                        url: path,
                        data: {usersIds: selectedUsersIds},
                        success: function (response) {
                            $('.queue-control').replaceWith(queueControlSource);
                            $('.queue-control').css("display", "none");
                            QueueList();
                        }
                    });
                });
            }

            //Open queue control to create new queue element
            $('button.btn-add-to-queue').click(function() {
                emptyControl();
                $('.queue-control').show( "slide" );
                QueueControl('create', null, null);
            });

            //editing queue element
            $("div.queue-container").on("click", "div.edit-queue-element", function() {
                var queueElementId =  $("div.queue-game").has($(this)).attr("id");
                var selectedUsersIds = [];

                //empty queue control fields
                emptyControl();

                $.ajax({
                    type: "post",
                    url: "{{ path('kdsm_queue', {'method':'single_queue'}) }}/"+queueElementId,
                    success: function (response) {
                        if(response.users != undefined) {
                            console.log(response);
                            for (var i = 0; i < response.users.length; i++) {
                                console.log(response.users[i]);
                                //if user is not me
                                if(response.users[i].userStatus != "queueOwner" && response.users[i].userId != response.LoggedUserId) {
                                    selectedUsersIds.push(response.users[i].userId);
                                    $('.queue-control').find("ul.log-list").append("<li id='user-" + response.users[i].userId + "' class='ui-menu-item' tabindex='-1'>" + response.users[i].userName + "</li>");
                                }
                            }
                        }
                    }
                });

                //call queue control function
                QueueControl("join_users", queueElementId, selectedUsersIds);
                $('.queue-control').show( "slide" );
            });

            //user invitation response
            function InviteUserResponse(queueElementId, answer) {
                var userId = {{ app.user.id }};
                $.ajax({
                    type: "post",
                    url: "{{ path('kdsm_queue', {'method':'process_invite'}) }}/"+queueElementId,
                    data: {userResponse: answer, userId: userId},
                    success: function (response) {
                        console.log(response);
                        QueueList();
                    }
                });
            }

            $("div.queue-container").on("click", "div.accept-invitation", function() {
                var queueElementId =  $("div.queue-game").has($(this)).attr("id");
                InviteUserResponse(queueElementId, "accepted");
            });

            $("div.queue-container").on("click", "div.decline-invitation", function() {
                var queueElementId =  $("div.queue-game").has($(this)).attr("id");
                InviteUserResponse(queueElementId, "declined");
            });

            //removing queue element
            $("div.queue-container").on("click", "div.remove-queue-element", function() {
                var queueElementId =  $("div.queue-game").has($(this)).attr("id");
                $.ajax({
                    type: "post",
                    url: "{{ path('kdsm_queue', {'method':'remove'}) }}/"+queueElementId,
                    success: function (response) {
                        console.log(response);
                        QueueList();
                    }
                });
            });
        });
    </script>
    {% endblock %}
   <div class="queue-container">
       <div class="row queue-game default-queue-element hidden">
           <div class="col-sm-11 queue-element-users">
               {%  for i in 0..3 %}
                <div class="col-sm-3">
                    <div class="row player-{{ i }}">
                       <img class="col-sm-4 img-responsive player-photo" src="{{ asset('bundles/kdsmcontent/images/add-user.png') }}" alt=""/>
                       <span class="col-sm-8 text-center player-name"></span>
                    </div>
                </div>
               {% endfor %}
           </div>
           <div class="col-sm-1 queue-element-info">
               <div class="row queue-actions">
                       <div class="col-sm-6 action edit-queue-element">
                           <i class="fa fa-pencil-square-o"></i>
                       </div>
                       <div class="col-sm-6 action remove-queue-element">
                           <i class="fa fa-times"></i>
                       </div>
               </div>
           </div>
       </div>
       <button class="btn btn-success btn-add-to-queue">Stoti Ä¯ eilÄ</button>
   </div>
{% endblock %}